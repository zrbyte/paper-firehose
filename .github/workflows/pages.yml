name: Build and Deploy

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'  # 04:00 UTC daily

permissions:
  contents: write # for uploading DB for inspection to a data branch
  pages: write
  id-token: write

# Avoid two runs messing up the sqlite DB by running in parallel
concurrency:
  group: pages-db
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore database cache
        uses: actions/cache@v3
        with:
          path: assets/seen_entries.db
          key: seen-db-${{ github.run_id }}     # unique per run
          restore-keys: |
            seen-db-                            # restore most recent

      - name: Ensure assets dir & empty DB if missing
        run: |
          mkdir -p assets
          [ -f assets/seen_entries.db ] || sqlite3 assets/seen_entries.db ".databases" || true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - run: pip install -r requirements.txt

      - run: python rssparser.py --no-upload  # don't upload to EK server
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Snapshot DB to data branch with retention (worktree)
        env:
          KEEP_SNAPSHOTS: "30"
          SNAP_DIR: "assets/db_history"
          DB_SRC: "assets/matched_entries_history.db"
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
          git fetch origin
          # Ensure data exists; create if missing
          if ! git show-ref --verify --quiet refs/remotes/origin/data; then
            # create an orphan data branch starting from current commit (or empty tree if you prefer)
            git branch -f data HEAD
            git push -u origin data || true
          fi
      
          # Add a temporary worktree checked out at data
          mkdir -p /tmp/data-wt
          git worktree add -f /tmp/data-wt data
      
          pushd /tmp/data-wt
            mkdir -p "$SNAP_DIR"
            TS="$(date -u +%Y%m%dT%H%M%SZ)"
            SNAP_PATH="$SNAP_DIR/matched_entries_history_${TS}.db"
      
            # Copy from the main workspace into the data worktree
            cp "$GITHUB_WORKSPACE/$DB_SRC" "$SNAP_PATH"
            cp "$GITHUB_WORKSPACE/$DB_SRC" assets/matched_entries_history.latest.db
      
            mapfile -t FILES < <(ls -1t "$SNAP_DIR"/matched_entries_history_*.db 2>/dev/null || true)
            if [ "${#FILES[@]}" -gt "${KEEP_SNAPSHOTS}" ]; then
              for f in "${FILES[@]:${KEEP_SNAPSHOTS}}"; do rm -f "$f"; done
            fi
      
            git add -f "$SNAP_PATH" assets/matched_entries_history.latest.db
            git add -A "$SNAP_DIR" || true
      
            if ! git diff --cached --quiet; then
              git commit -m "Snapshot matched_entries_history.db @ ${TS} [skip ci]"
              git push origin data
            else
              echo "No changes to commit."
            fi
          popd
      
          # Clean up the worktree
          git worktree remove -f /tmp/data-wt
          
      - name: Prepare site
        run: |
          mkdir site
          cp -r archive site/ || true
          cp *.html site/ || true

      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
